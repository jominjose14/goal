import { fileURLToPath } from 'url';
import { resolve, sep as fileSeparator, dirname } from 'path';
import { promises as fs } from 'fs';
import { glob } from 'glob';

// Constants
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const rootDir = resolve(__dirname, '../..');
const buildDir = resolve(rootDir, 'build');
const publicDir = resolve(buildDir, 'public');
const clientDir = resolve(rootDir, 'dev/client');
const srcDir = resolve(clientDir, 'src');

// Main
async function main() {
    console.log('[INFO]', 'rootDir'.padEnd(10), rootDir);
    console.log('[INFO]', 'buildDir'.padEnd(10), buildDir);
    console.log('[INFO]', 'publicDir'.padEnd(10), publicDir);
    console.log('[INFO]', 'clientDir'.padEnd(10), clientDir);
    console.log('[INFO]', 'srcDir'.padEnd(10), srcDir);

    await copyDirs();
    await editHtml();
}
await main();

// Tasks
async function copyDirs() {
    // Create required directories
    await fs.mkdir(resolve(publicDir, 'audio'), { recursive: true });
    await fs.mkdir(resolve(publicDir, 'images'), { recursive: true });

    // Copy MP3 files
    const mp3Files = await glob('audio/*.mp3', {cwd: srcDir, absolute: true});

    for (const file of mp3Files) {
        const fileName = file.split(fileSeparator).pop();
        await fs.copyFile(
            resolve(srcDir, file),
            resolve(publicDir, 'audio', fileName)
        );
    }

    console.log(`[INFO] Copied ${mp3Files.length} audio files`);

    // Copy SVG files
    const svgFiles = await glob('images/*.svg', {cwd: srcDir, absolute: true});

    for (const file of svgFiles) {
        const fileName = file.split(fileSeparator).pop();
        await fs.copyFile(
            resolve(srcDir, file),
            resolve(publicDir, 'images', fileName)
        );
    }

    console.log(`[INFO] Copied ${svgFiles.length} image files`);
}

async function editHtml() {
    const htmlPath = resolve(publicDir, 'index.html');
    let html = await fs.readFile(htmlPath, 'utf-8');

    // Convert external css into inline css

    const cssFiles = await glob('assets/*.css', {cwd: publicDir, absolute: true});
    if (cssFiles.length === 0) {
        console.error("[ERROR] Could not locate external css file generated by build process");
        return;
    }

    const cssFile = cssFiles[0];
    const cssFileName = cssFile.split(fileSeparator).pop();
    const cssContent = await fs.readFile(cssFile, 'utf-8');
    html = html.replace(
        `<link rel="stylesheet" crossorigin href="/assets/${cssFileName}">`,
        `<style>${cssContent}</style>`
    );
    await fs.unlink(cssFiles[0]); // delete external css file
    console.log('[INFO] Injected inline css, removed external stylesheet link tag, deleted external css file');

    // Update script tag to remove attribute type="module"

    html = html.replace(
        /<script type="module"/g,
        '<script defer'
    );
    console.log('[INFO] Removed type="module" and added defer to script tag');

    // Write to index.html
    await fs.writeFile(htmlPath, html);
}